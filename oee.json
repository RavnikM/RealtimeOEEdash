[
    {
        "id": "4749887b86e58fe3",
        "type": "tab",
        "label": "OEE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "81bd5f8a9c8be96d",
        "type": "inject",
        "z": "4749887b86e58fe3",
        "name": "Part OK",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "4",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 620,
        "y": 300,
        "wires": [
            [
                "e5ea22a276ef61b0"
            ]
        ]
    },
    {
        "id": "4fa91df0c78f0c7f",
        "type": "comment",
        "z": "4749887b86e58fe3",
        "name": "Data collected from Machine's control system PC/PLC/HMI",
        "info": "",
        "x": 230,
        "y": 260,
        "wires": []
    },
    {
        "id": "2e8b0bb23c081324",
        "type": "comment",
        "z": "4749887b86e58fe3",
        "name": "OEE Formula",
        "info": "# Availability\nAvailability takes into account all events that stop planned production long enough where it makes sense to track a reason for being down (typically several minutes).\n\nAvailability is calculated as the ratio of Run Time to Planned Production Time:\n\n`Availability = Run Time / Planned Production Time`\n\nRun Time is simply Planned Production Time less Stop Time, where Stop Time is defined as all time where the manufacturing process was intended to be running but was not due to Unplanned Stops (e.g., Breakdowns) or Planned Stops (e.g., Changeovers).\n\n`Run Time = Planned Production Time − Stop Time`\n\n# Performance\nPerformance takes into account anything that causes the manufacturing process to run at less than the maximum possible speed when it is running (including both Slow Cycles and Small Stops).\n\nPerformance is the ratio of Net Run Time to Run Time. It is calculated as:\n\n`Performance = (Ideal Cycle Time × Total Count) / Run Time`\n\nIdeal Cycle Time is the fastest cycle time that your process can achieve in optimal circumstances. Therefore, when it is multiplied by Total Count the result is Net Run Time (the fastest possible time to manufacture the parts).\n\nSince rate is the reciprocal of time, Performance can also be calculated as:\n\n`Performance = (Total Count / Run Time) / Ideal Run Rate`\n\nPerformance should never be greater than 100%. If it is, that usually indicates that Ideal Cycle Time is set incorrectly (it is too high).\n\n# Quality\nQuality takes into account manufactured parts that do not meet quality standards, including parts that need rework. Remember, OEE Quality is similar to First Pass Yield, in that it defines Good Parts as parts that successfully pass through the manufacturing process the first time without needing any rework.\n\nQuality is calculated as:\n\n`Quality = Good Count / Total Count`\n\nThis is the same as taking the ratio of Fully Productive Time (only Good Parts manufactured as fast as possible with no Stop Time) to Net Run Time (all parts manufactured as fast as possible with no stop time).\n\n# OEE Formula\nOEE takes into account all losses, resulting in a measure of truly productive manufacturing time. It is calculated as:\n\n`OEE = Availability × Performance × Quality`\n\nIf the equations for Availability, Performance, and Quality are substituted in the above and reduced to their simplest terms, the result is:\n\n`OEE = (Good Count × Ideal Cycle Time) / Planned Production Time`\n\nThis is the “simplest” OEE calculation described earlier. And, as described earlier, multiplying Good Count by Ideal Cycle Time results in Fully Productive Time (manufacturing only Good Parts, as fast as possible, with no Stop Time).",
        "x": 1250,
        "y": 320,
        "wires": []
    },
    {
        "id": "e5ea22a276ef61b0",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "PartsCounter",
        "func": "var ok = flow.get('ok')||0;\nvar scrap = flow.get('scrap')||0;\n\nif (msg.payload == true)\n{\n    ok++;\n}\n    \nif (msg.payload == false) \n{\n    scrap++;\n}\n\nif (msg.topic == \"reset\") \n{\n    scrap = 0;\n    ok = 0;\n}\n\n// zavoljo simulacije da odšteje kose med tem ko naj bi bil alarm\nif (msg.topic == \"alarmTime\")\n{\n    ok = ok - 5\n}\n\nflow.set('ok', ok)\nflow.set('scrap', scrap)\n\nvar newMsg = { payload:\"count\" };\nnewMsg.ok = ok\nnewMsg.scrap = scrap\nnewMsg.topic = 'parts'\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "ebead9d07e854c30",
                "ae73feaa60e574d8",
                "3498a1d33e619bb7",
                "a98f189613f9cc47"
            ]
        ]
    },
    {
        "id": "e89b504f20fc253e",
        "type": "inject",
        "z": "4749887b86e58fe3",
        "name": "Production Schedule",
        "props": [
            {
                "p": "payload.start",
                "v": "2022-02-25 22:42:40",
                "vt": "str"
            },
            {
                "p": "payload.stop",
                "v": "2022-02-25 23:50",
                "vt": "str"
            },
            {
                "p": "payload.article",
                "v": "M8 Bolt",
                "vt": "str"
            },
            {
                "p": "payload.cycleTime",
                "v": "30",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "PlannedProductionTime",
        "x": 580,
        "y": 460,
        "wires": [
            [
                "090f11af4c6860c5"
            ]
        ]
    },
    {
        "id": "32c98842a35fcfdd",
        "type": "inject",
        "z": "4749887b86e58fe3",
        "name": "Part Scraped",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "e5ea22a276ef61b0"
            ]
        ]
    },
    {
        "id": "090f11af4c6860c5",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "ScheduleCheck",
        "func": "var runActive = flow.get('runActive')||false;\nvar alarmTime = flow.get('alarmTime')||0;\nvar PlannedProductionTime = flow.get('PlannedProductionTime')||0;\nvar ActiveTime = flow.get('ActiveTime')||0;\n\nstart = new Date(msg.payload.start);\nstop = new Date(msg.payload.stop);\nnow = new Date()\n\n//node.warn(now + ' ' + start + ' ' + stop)\n\nif ((now >= start && now <= stop) && msg.topic == \"PlannedProductionTime\")\n{\n  runActive = true;\n  //PlannedProductionTime = Math.floor((stop - start) / 1000 / 60);\n  PlannedProductionTime = ((stop - start) / 1000 / 60);\n  ActiveTime = (((now - start) / 1000 / 60) - alarmTime)\n  flow.set('PlannedProductionTime', PlannedProductionTime);\n  flow.set('runActive', runActive);\n}\nelse if ((now <= start || now >= stop) && msg.topic == \"PlannedProductionTime\")\n{\n  runActive = false;\n  PlannedProductionTime = 0;\n  alarmTime = 0;\n  ActiveTime = 0;\n  flow.set('PlannedProductionTime', PlannedProductionTime);\n  flow.set('alarmTime', alarmTime);\n  flow.set('runActive', runActive);\n}\n\n\nif (msg.topic == \"alarmTime\")\n{\n    alarmTime = alarmTime + Math.abs(( (stop - start)) / 1000 / 60);\n    flow.set('alarmTime', alarmTime);\n    //node.warn(\"Alarm time :\" + alarmTime)\n    //node.warn(\"Alarm\");\n}\n \nvar newMsg = { payload:\"schedule\" };\nnewMsg.cycleTime = msg.payload.cycleTime\nnewMsg.runActive = runActive;\nnewMsg.PlannedProductionTime = PlannedProductionTime.toFixed(3);\nnewMsg.ActiveTime = ActiveTime.toFixed(3)\nnewMsg.AlarmTime = alarmTime.toFixed(3);\nnewMsg.Article = msg.payload.article\nnewMsg.topic = 'time'\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 480,
        "wires": [
            [
                "27dbeab4e9fa5464",
                "ae73feaa60e574d8",
                "a994355fa8edd144",
                "3271a891c5277be1",
                "a108e5d38c8631cd",
                "e05a7199320c4b41",
                "7d5af9ac93dea954",
                "111cb95e86f06421"
            ]
        ]
    },
    {
        "id": "42c79281ed2ac4c0",
        "type": "inject",
        "z": "4749887b86e58fe3",
        "name": "reset",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "x": 630,
        "y": 380,
        "wires": [
            [
                "e5ea22a276ef61b0"
            ]
        ]
    },
    {
        "id": "ebead9d07e854c30",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "Quality",
        "func": "/*\nQuality\nQuality takes into account manufactured parts that do not meet quality standards, \nincluding parts that need rework. Remember, OEE Quality is similar to First Pass Yield, \nin that it defines Good Parts as parts that successfully pass through the manufacturing process \nthe first time without needing any rework.\n\nQuality is calculated as:\n\nQuality = Good Count / Total Count\n\nThis is the same as taking the ratio of Fully Productive Time \n(only Good Parts manufactured as fast as possible with no Stop Time) to Net Run Time \n(all parts manufactured as fast as possible with no stop time).\n*/\n\nquality = (msg.ok / (msg.ok + msg.scrap)).toFixed(3)\n\n/*\nvar newMsg = { payload:\"quality\" };\nnewMsg.quality = quality\n*/\nvar newMsg = { payload:quality };\nnewMsg.topic = \"quality\"\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "18d477796342ae74",
                "d88610e3fe641af0"
            ]
        ]
    },
    {
        "id": "27dbeab4e9fa5464",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "Availability",
        "func": "/*\nAvailability\nAvailability takes into account all events that stop planned production long enough where it makes sense to track a reason for being down (typically several minutes).\n\nAvailability is calculated as the ratio of Run Time to Planned Production Time:\n\nAvailability = Run Time / Planned Production Time\n\nRun Time is simply Planned Production Time less Stop Time, where Stop Time is defined as all time where the manufacturing process was intended to be running but was not due to Unplanned Stops (e.g., Breakdowns) or Planned Stops (e.g., Changeovers).\n\nRun Time = Planned Production Time − Stop Time\n*/\n\n/*\n    msg.runActive = runActive;\n    msg.PlannedProductionTime = runTime;\n    msg.AlarmTime = alarmTime;\n    \n    node.warn(msg.runActive)\n    node.warn(msg.PlannedProductionTime)\n    node.warn(msg.AlarmTime)\n    node.warn(msg.runActive)\n*/\n\navailability = 0;\n    \nif (msg.runActive == true)\n{\n    /*\n    node.warn(msg.runActive)\n    node.warn(msg.PlannedProductionTime)\n    node.warn(msg.AlarmTime)\n    node.warn( (msg.PlannedProductionTime - msg.AlarmTime) / msg.PlannedProductionTime );\n    */\n    //availability = ((msg.PlannedProductionTime - msg.AlarmTime) / msg.PlannedProductionTime)\n    availability = ((msg.ActiveTime - msg.AlarmTime) / msg.ActiveTime).toFixed(3)\n\n}\nvar newMsg = { payload:availability };\nnewMsg.topic = \"availability\"\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 480,
        "wires": [
            [
                "18d477796342ae74",
                "d7f2de3a6fa33719"
            ]
        ]
    },
    {
        "id": "34cdcd7b277798ca",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "Performance",
        "func": "/*\nPerformance\nPerformance takes into account anything that causes the manufacturing process to \nrun at less than the maximum possible speed when it is running (including both Slow Cycles and Small Stops).\n\nPerformance is the ratio of Net Run Time to Run Time. It is calculated as:\n\nPerformance = (Ideal Cycle Time × Total Count) / Run Time\n\nIdeal Cycle Time is the fastest cycle time that your process can achieve in optimal\ncircumstances. Therefore, when it is multiplied by Total Count the result is Net Run Time (the fastest possible time to manufacture the parts).\n\nSince rate is the reciprocal of time, Performance can also be calculated as:\n\nPerformance = (Total Count / Run Time) / Ideal Run Rate\n\nPerformance should never be greater than 100%. If it is, that usually indicates that Ideal Cycle Time is set incorrectly (it is too high).\n*/\n\n/*\n\nmsg.ok = ok\nmsg.bad = bad\nmsg.topic = 'parts'\n\nmsg.cycleTime = msg.payload.cycleTime\nmsg.runActive = runActive;\nmsg.PlannedProductionTime = runTime;\nmsg.AlarmTime = alarmTime;\nmsg.ActiveTime\nmsg.topic = 'time'\n\n*/\nperformance = 0;\nif (msg.runActive == true)\n{\n   performance =   (((msg.ok + msg.scrap) / msg.ActiveTime) / msg.cycleTime).toFixed(3)\n}\n\nvar newMsg = { payload:performance };\nnewMsg.topic = \"performance\"\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "18d477796342ae74",
                "3ef6d2c7ef1c76e9"
            ]
        ]
    },
    {
        "id": "fb051cb7d4c382aa",
        "type": "inject",
        "z": "4749887b86e58fe3",
        "name": "Brakedown",
        "props": [
            {
                "p": "payload.start",
                "v": "2022-02-11 05:00:00",
                "vt": "str"
            },
            {
                "p": "payload.stop",
                "v": "2022-02-11 05:00:10",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "alarmTime",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "090f11af4c6860c5",
                "e5ea22a276ef61b0"
            ]
        ]
    },
    {
        "id": "feca759e79bd3c64",
        "type": "function",
        "z": "4749887b86e58fe3",
        "name": "OEE",
        "func": "oee = msg.payload.performance * msg.payload.availability * msg.payload.quality\nvar newMsg = { payload:oee };\nnewMsg.payload.performance = msg.payload.performance\nnewMsg.payload.availability = msg.payload.availability\nnewMsg.payload.availability = msg.payload.availability\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 360,
        "wires": [
            [
                "6acefe30c484529c",
                "7004b88ba826c423",
                "ff6d4515099d3101"
            ]
        ]
    },
    {
        "id": "18d477796342ae74",
        "type": "join",
        "z": "4749887b86e58fe3",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 440,
        "wires": [
            [
                "feca759e79bd3c64",
                "64696ba166a2aed2"
            ]
        ]
    },
    {
        "id": "ae73feaa60e574d8",
        "type": "join",
        "z": "4749887b86e58fe3",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "34cdcd7b277798ca",
                "3734cb7c773153f5"
            ]
        ]
    },
    {
        "id": "3734cb7c773153f5",
        "type": "debug",
        "z": "4749887b86e58fe3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 360,
        "wires": []
    },
    {
        "id": "d88610e3fe641af0",
        "type": "ui_gauge",
        "z": "4749887b86e58fe3",
        "name": "",
        "group": "7c4bac9e6546739f",
        "order": 1,
        "width": "2",
        "height": "2",
        "gtype": "donut",
        "title": "Quality",
        "label": "",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#b41820",
            "#e6e600",
            "#00bc00"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1500,
        "y": 500,
        "wires": []
    },
    {
        "id": "3ef6d2c7ef1c76e9",
        "type": "ui_gauge",
        "z": "4749887b86e58fe3",
        "name": "",
        "group": "7c4bac9e6546739f",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "Performance",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#b41820",
            "#e6e600",
            "#00bc00"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1510,
        "y": 540,
        "wires": []
    },
    {
        "id": "d7f2de3a6fa33719",
        "type": "ui_gauge",
        "z": "4749887b86e58fe3",
        "name": "",
        "group": "7c4bac9e6546739f",
        "order": 1,
        "width": "2",
        "height": "2",
        "gtype": "donut",
        "title": "Availability",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#b41820",
            "#e6e600",
            "#00bc00"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1510,
        "y": 580,
        "wires": []
    },
    {
        "id": "6acefe30c484529c",
        "type": "ui_gauge",
        "z": "4749887b86e58fe3",
        "name": "",
        "group": "0d9acf37926f502e",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Overall Efficiency",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#b41820",
            "#e6e600",
            "#00bc00"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1890,
        "y": 400,
        "wires": []
    },
    {
        "id": "7004b88ba826c423",
        "type": "ui_chart",
        "z": "4749887b86e58fe3",
        "name": "",
        "group": "0d9acf37926f502e",
        "order": 4,
        "width": "0",
        "height": "0",
        "label": "OEE",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1850,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ff6d4515099d3101",
        "type": "mysql",
        "z": "4749887b86e58fe3",
        "d": true,
        "mydb": "",
        "name": "",
        "x": 1850,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3498a1d33e619bb7",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "eca91baf890b8a89",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Quality Ok",
        "format": "{{msg.ok}}",
        "layout": "row-spread",
        "className": "",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "a98f189613f9cc47",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "eca91baf890b8a89",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Scrap",
        "format": "{{msg.scrap}}",
        "layout": "row-spread",
        "className": "",
        "x": 1050,
        "y": 300,
        "wires": []
    },
    {
        "id": "a994355fa8edd144",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Optimal Cycle Time",
        "format": "{{msg.cycleTime}} parts/min",
        "layout": "row-spread",
        "className": "",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "3271a891c5277be1",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "ActiveTime",
        "format": "{{msg.ActiveTime}} min.",
        "layout": "row-spread",
        "className": "",
        "x": 1150,
        "y": 600,
        "wires": []
    },
    {
        "id": "a108e5d38c8631cd",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "AlarmTime",
        "format": "{{msg.AlarmTime}} min.",
        "layout": "row-spread",
        "className": "",
        "x": 1150,
        "y": 640,
        "wires": []
    },
    {
        "id": "e05a7199320c4b41",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "PlannedProductionTime",
        "format": "{{msg.PlannedProductionTime}} min.",
        "layout": "row-spread",
        "className": "",
        "x": 1190,
        "y": 680,
        "wires": []
    },
    {
        "id": "7d5af9ac93dea954",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Article",
        "format": "{{msg.Article}}",
        "layout": "row-spread",
        "className": "",
        "x": 1130,
        "y": 720,
        "wires": []
    },
    {
        "id": "64696ba166a2aed2",
        "type": "debug",
        "z": "4749887b86e58fe3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 440,
        "wires": []
    },
    {
        "id": "26fc0b3fd5b35ccc",
        "type": "mqtt in",
        "z": "4749887b86e58fe3",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "auto",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "cabe3e9df45f2dde",
        "type": "http in",
        "z": "4749887b86e58fe3",
        "d": true,
        "name": "",
        "url": "",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b5c20c78487fc599",
        "type": "s7 in",
        "z": "4749887b86e58fe3",
        "d": true,
        "endpoint": "",
        "mode": "single",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "687da5555518c8db",
        "type": "http request",
        "z": "4749887b86e58fe3",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 230,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e44b30df255d89ac",
        "type": "mysql",
        "z": "4749887b86e58fe3",
        "d": true,
        "mydb": "",
        "name": "",
        "x": 70,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "29c19b1dea401816",
        "type": "comment",
        "z": "4749887b86e58fe3",
        "name": "Simulated machine input",
        "info": "",
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "111cb95e86f06421",
        "type": "ui_text",
        "z": "4749887b86e58fe3",
        "group": "da0ca3c11746999f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Run Active",
        "format": "{{msg.runActive}}",
        "layout": "row-spread",
        "className": "",
        "x": 1150,
        "y": 760,
        "wires": []
    },
    {
        "id": "7c4bac9e6546739f",
        "type": "ui_group",
        "name": "Q * P * A",
        "tab": "b2ac192cb5e70c29",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0d9acf37926f502e",
        "type": "ui_group",
        "name": "OEE",
        "tab": "b2ac192cb5e70c29",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eca91baf890b8a89",
        "type": "ui_group",
        "name": "Produced goods",
        "tab": "b2ac192cb5e70c29",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da0ca3c11746999f",
        "type": "ui_group",
        "name": "Schedule",
        "tab": "b2ac192cb5e70c29",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b2ac192cb5e70c29",
        "type": "ui_tab",
        "name": "Copmany.Machine KPIs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]